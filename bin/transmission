#!/usr/bin/env python


import json
import asyncio
import aiohttp
from os import path
from pprint import pprint
from argparse import ArgumentParser


class Transmission:

    def __init__(self, host="localhost", port=9091, login=None, password=None):
        self.headers = {}
        self.url = "http://{}:{}/transmission/rpc".format(host, port)
        self.credential = aiohttp.helpers.BasicAuth(login=login, password=password) if login and password else None


    @asyncio.coroutine
    def torrent_get(self):
        payload = {
            'method': 'torrent-get',
            'arguments': {
                'fields': [
                    'id',
                    'name',
                    'hashString',
                    ],
                },
            'tag': 'torrent-get'
        }
        return (yield from self.remote_call(payload))


    @asyncio.coroutine
    def torrent_add(self, movie):
        payload = {
            'method': 'torrent-add',
            'arguments': {
                'filename': movie,
                'download-dir': '/mnt/downloads/Movies',
                },
            'tag': 'torrent-add'
        }
        return (yield from self.remote_call(payload))


    @asyncio.coroutine
    def remote_call(self, payload):
        while True:
            try:
                print("making query")
                request = aiohttp.request("post", self.url, auth=self.credential, headers=self.headers, data=json.dumps(payload))
                response = yield from asyncio.wait_for(request, 10)
                if response.status == 409:
                    print("renewing X-Transmission-Session-Id")
                    self.headers["X-Transmission-Session-Id"] = response.headers["X-Transmission-Session-Id"]
                    continue
                elif response.status == 200 and response.headers['Content-Type'].startswith("application/json"):
                    result = yield from response.json()
                    return result['arguments']
                else:
                    print("got an unexpected response")
                    result = yield from response.json()
                    pprint(result)
                    return None
            except asyncio.TimeoutError:
                print("retrying after timeout")

'''
    {
*       "AgeRating": "R",
        "CoverImage": "https://static.yts.re/attachments/The_Godfather_Part_II_1974_1080p/the_godfather_2_1080_med.jpg",
        "DateUploaded": "2013-03-04 21:21:32",
*       "DateUploadedEpoch": 1362385292,
        "Downloaded": "147572",
*       "Genre": "Crime",
*       "ImdbCode": "tt0071562",
        "ImdbLink": "http://www.imdb.com/title/tt0071562/",
        "MovieID": "3091",
*       "MovieRating": "9.1",
        "MovieTitle": "The Godfather: Part II (1974) 1080p",
*       "MovieTitleClean": "The Godfather: Part II",
        "MovieUrl": "https://yts.re/movie/The_Godfather_Part_II_1974_1080p",
*       "MovieYear": "1974",
*       "Quality": "1080p",
        "Size": "2.70 GB",
*       "SizeByte": "2899102925",
        "State": "OK",
        "TorrentHash": "6c9124fe9a99b2001fad76a76152691bc515a80d",
        "TorrentMagnetUrl": "magnet:?xt=urn:btih:6c9124fe9a99b2001fad76a76152691bc515a80d&dn=The+Godfather:+Part+II&tr=http://exodus.desync.com:6969/announce&tr=udp://tracker.openbittorrent.com:80/announce&tr=udp://open.demonii.com:1337/announce&tr=udp://exodus.desync.com:6969/announce&tr=udp://tracker.yify-torrents.com/announce",
        "TorrentPeers": "37",
        "TorrentSeeds": "62",
        "TorrentUrl": "https://yts.re/download/start/6C9124FE9A99B2001FAD76A76152691BC515A80D.torrent",
*       "Uploader": "Bokutox",
        "UploaderUID": "19020"
    },
'''


@asyncio.coroutine
def main():

    parser = ArgumentParser()
    parser.add_argument("-H", "--host", default="localhost",  help="Transmission RPC host name")
    parser.add_argument("-p", "--port", type=int, default=9091, help="Transmission RPC port number")
    parser.add_argument("-l", "--login", help="Username of Transmission RPC if it need authentication")
    parser.add_argument("-P", "--password", help="Password of Transmission RPC if it need authentication")
    parser.add_argument("-t", "--timeout", type=int, default=10, help="Timeout for Transmission RPC queries")
    parser.add_argument("-d", "--database", default="1080p", help="Movie database to use")
    options = parser.parse_args()

    transmission = Transmission(options.host, options.port, options.login, options.password)
    result = yield from transmission.torrent_get()
    torrent_list = result['torrents']
    session_movie_list = [torrent['hashString'] for torrent in torrent_list]

    database = path.join(path.dirname(__file__), "../var/db", "movies_{}.json".format(options.database))

    with open(database, 'r') as db:
        current_movie_list = json.load(db)
        wanted_movies = (movie for movie in current_movie_list if float(movie['MovieRating']) >= 6.0)
        for movie in wanted_movies:
            if movie['TorrentHash'] not in session_movie_list:
                result = yield from transmission.torrent_add(movie['TorrentUrl'])
                if 'torrent-added' in result:
                    print("movie {} added".format(result['torrent-added']['name']))
                elif 'torrent-duplicate' in result:
                    print("movie {} duplicate".format(result['torrent-duplicate']['name']))
                else:
                    print("unexpected result when adding movie {}".format(movie['MovieTitle']))
                    pprint(result)


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

